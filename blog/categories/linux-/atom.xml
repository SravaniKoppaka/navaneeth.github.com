<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux, | {love to code}]]></title>
  <link href="http://navaneeth.github.com/blog/categories/linux-/atom.xml" rel="self"/>
  <link href="http://navaneeth.github.com/"/>
  <updated>2013-07-28T20:15:51+05:30</updated>
  <id>http://navaneeth.github.com/</id>
  <author>
    <name><![CDATA[nkn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use individual lines pulled from stdin in the middle of a command when using xargs]]></title>
    <link href="http://navaneeth.github.com/blog/2013/02/28/how-to-use-individual-lines-pulled-from-stdin-in-the-middle-of-a-command-when-using-xargs/"/>
    <updated>2013-02-28T10:57:00+05:30</updated>
    <id>http://navaneeth.github.com/blog/2013/02/28/how-to-use-individual-lines-pulled-from-stdin-in-the-middle-of-a-command-when-using-xargs</id>
    <content type="html"><![CDATA[<p><code>xargs</code> is very powerful commandline utility. Here is what Wikipedia says about <code>xargs</code></p>

<blockquote><p>xargs is a command on Unix and most Unix-like operating systems used to build and execute command lines from standard input</p></blockquote>

<p>Most common use of <code>xargs</code> would be to do something like,</p>

<p><code>bash
find . -type f -print0 | xargs -0 rm
</code></p>

<p>Let us assume that you have a file with list of files to be downloaded from a website. Something like,</p>

<p><code>
one.zip
two.zip
three.zip
</code></p>

<p>With <code>wget</code> and <code>xargs</code> all these files can be downloaded easily with just one command.</p>

<p><code>bash
cat filenames.txt | xargs -I filename wget http://download.com/filename
</code></p>

<p><code>-I</code> flag takes a replacement string and <code>xargs</code> will then replace <code>filename</code> with the value obtained from <code>stdin</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple egg timer on Linux for Pomodoro technique]]></title>
    <link href="http://navaneeth.github.com/blog/2010/12/19/simple-egg-timer-on-linux-for-pomodoro-technique/"/>
    <updated>2010-12-19T21:19:00+05:30</updated>
    <id>http://navaneeth.github.com/blog/2010/12/19/simple-egg-timer-on-linux-for-pomodoro-technique</id>
    <content type="html"><![CDATA[<p>Recently I have started evaluating the Pomodoro Technique which I found quite interesting. I am still evaluating the technique and not yet concluded on whether I should continue using it.</p>

<p>To implement pomodoro technique, you need a kitchen timer or egg timer. Since I use pomodoro for my programming work, I obviously don’t want to use a physical timer. I couldn’t find a decent timer for linux especially one that works well with Xfce. In this blog post, I will explain building a kitchen timer with basic linux programming techniques. This also gives an idea about how simple linux tools can be combined to do useful stuff.</p>

<p>Things that are used</p>

<ul>
<li>Shell scripting</li>
<li>Notification mechanisms on popular desktops like Gnome and Xfce. (I use Xfce in this example)</li>
</ul>


<p>The shell script is actually a modified version of the one published here (http://mostlylinux.wordpress.com/commandline/eggtimer/).</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>counter=0
limit=$1
summary=$2
startmessage=$3
endmessage=$4
notify-send -u critical -i appointment -t 600 "$summary" "$startmessage"
echo
while [ $counter != $limit ]; do
   echo "$counter minutes so far...";
   sleep 60
   let "counter = $counter + 1"
done
if [ $counter = $limit ]; then
   echo
   notify-send -u critical -i appointment "$summary" "$endmessage"
   echo -e '\a' &gt;&amp;2
   exit 0
fi
```</p>

<p>All it does is wait until the limit reaches. It uses the sleep(1) command to sleep for a minute. notify-send is used for sending notifications to the desktop environment.</p>

<p>This script can be invoked using,</p>

<p><code>sh
./p-timer.sh
</code></p>

<p>If you use bash, you can add an alias for convenience.</p>

<p><code>sh
alias begin-pomodoro='sh ~/utils/p-timer.sh 25 "Pomodoro" "Pomodoro started, you have 25 minutes left" "Pomodoro ended. Please stop the work and take short break"'
</code></p>

<p>This post is written on one pomodoro!</p>

<p>Happy programming!</p>
]]></content>
  </entry>
  
</feed>
